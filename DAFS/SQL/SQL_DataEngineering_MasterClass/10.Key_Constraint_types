 1. PRIMARY KEY Constraint
==========================
When trying to insert a duplicate value into a PRIMARY KEY column, it will fail because primary keys must be unique.

Example:
sql
CREATE TABLE rides (
    ride_id INT PRIMARY KEY,
    driver_id INT NOT NULL,
    rider_id INT NOT NULL,
    pickup_location VARCHAR(100) NOT NULL,
    dropoff_location VARCHAR(100) NOT NULL,
    ride_date DATETIME NOT NULL,
    fare DECIMAL(10, 2) NOT NULL
);


Insert Data (Valid)
sql
INSERT INTO rides (ride_id, driver_id, rider_id, pickup_location, dropoff_location, ride_date, fare)
VALUES
(1, 101, 201, 'Chennai', 'Coimbatore', '2024-12-29 08:00:00', 500.00);


 Insert Data (Fails due to duplicate ride_id)
sql
INSERT INTO rides (ride_id, driver_id, rider_id, pickup_location, dropoff_location, ride_date, fare)
VALUES
(1, 102, 202, 'Bangalore', 'Hyderabad', '2024-12-29 10:00:00', 800.00);


Explanation:  
The second INSERT statement will fail because the ride_id is a PRIMARY KEY, and 1 is already used in the table. Primary keys must be unique.

---

2. UNIQUE Constraint 
=======================
The UNIQUE constraint ensures that no two rows can have the same value in a column, but allows NULL values. If you try to insert a duplicate value in a column with a UNIQUE constraint, it will fail.

 Example:
sql
CREATE TABLE users (
    user_id INT PRIMARY KEY,
    email VARCHAR(100) UNIQUE
);



INSERT INTO users (user_id, email)
VALUES (1, 'user1@example.com');  -- First row, valid unique email

INSERT INTO users (user_id, email)
VALUES (2, 'user2@example.com');  -- Second row, valid unique email

INSERT INTO users (user_id, email)
VALUES (3, NULL);  -- Third row, valid as NULL is allowed

INSERT INTO users (user_id, email)
VALUES (4, 'user1@example.com');  -- Fails, duplicate non-NULL email

INSERT INTO users (user_id, email)
VALUES (5, NULL);  -- Valid, second NULL value is allowed

Explanation:
You can insert multiple NULL values because NULL is not considered a value in the traditional sense, so they are treated as distinct.

However, non-NULL values must be unique in the column.
In this example:

The email column can have one or more NULL values, but each non-NULL email must be unique.
---

 3. NOT NULL Constraint Failure

The NOT NULL constraint ensures that a column cannot contain NULL values. If you try to insert a NULL value into a NOT NULL column, the operation will fail.

 Example:
sql
CREATE TABLE rides (
    ride_id INT PRIMARY KEY,
    driver_id INT NOT NULL,
    rider_id INT NOT NULL,
    pickup_location VARCHAR(100) NOT NULL,
    dropoff_location VARCHAR(100) NOT NULL,
    ride_date DATETIME NOT NULL,
    fare DECIMAL(10, 2) NOT NULL
);


 Insert Data (Valid)
sql
INSERT INTO rides (ride_id, driver_id, rider_id, pickup_location, dropoff_location, ride_date, fare)
VALUES
(3, 103, 203, 'Coimbatore', 'Chennai', '2024-12-29 14:00:00', 600.00);


 Insert Data (Fails due to NULL in pickup_location)
sql
INSERT INTO rides (ride_id, driver_id, rider_id, pickup_location, dropoff_location, ride_date, fare)
VALUES
(4, 104, 204, NULL, 'Chennai', '2024-12-29 16:00:00', 700.00);


Explanation:  
The second INSERT will fail because pickup_location is defined as NOT NULL, and NULL is being inserted, which violates the constraint.



 
---
3. Check Constraint
===================
A "CHECK constraint" in SQL is a database constraint that enforces a specific condition on data within a table, ensuring that only values meeting that condition can be inserted or updated, thereby maintaining data integrity and consistency

CHECK: Ensure that the fare is a positive number for each ride.
CREATE TABLE riders (
    rider_id INT PRIMARY KEY,
    rider_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL
);

CREATE TABLE rides (
    ride_id INT PRIMARY KEY,
    driver_id INT NOT NULL,
    rider_id INT,
    pickup_location VARCHAR(100) NOT NULL,
    dropoff_location VARCHAR(100) NOT NULL,
    ride_date DATETIME NOT NULL,
    fare DECIMAL(10, 2) CHECK (fare > 0),
    FOREIGN KEY (rider_id) REFERENCES riders(rider_id)
);

4. Foreign Key Constraint
============================
Scenario: One Foreign Key (Driver to Ride Relationship)
We’ll now establish a one-to-many relationship between `drivers` and `rides`, where one driver can have many rides.

DDL (Create Table Statements):


-- Creating the drivers table
CREATE TABLE drivers (
    driver_id INT PRIMARY KEY,
    driver_name VARCHAR(100),
    license_number VARCHAR(50) UNIQUE
);

-- Creating the rides table with driver_id as a foreign key
CREATE TABLE rides (
    ride_id INT PRIMARY KEY,
    driver_id INT,
    pickup_location VARCHAR(100),
    dropoff_location VARCHAR(100),
    ride_date DATETIME,
    fare DECIMAL(10, 2),
    FOREIGN KEY (driver_id) REFERENCES drivers(driver_id)
);


Inserts (Successful Insertion):


-- Inserting drivers
INSERT INTO drivers (driver_id, driver_name, license_number)
VALUES (101, 'John Doe', 'XYZ12345'), (102, 'Jane Smith', 'ABC67890');

-- Inserting rides associated with each driver
INSERT INTO rides (ride_id, driver_id, pickup_location, dropoff_location, ride_date, fare)
VALUES
(301, 101, 'Chennai', 'Coimbatore', '2024-12-01 08:00:00', 500.00),
(302, 101, 'Chennai', 'Madurai', '2024-12-01 09:30:00', 600.00),
(303, 102, 'Bangalore', 'Hyderabad', '2024-12-02 10:00:00', 700.00);


Expected Output (Successful JOIN):

To retrieve the details of the rides along with the driver's information, we can use an INNER JOIN:


SELECT r.ride_id, r.pickup_location, r.dropoff_location, r.ride_date, r.fare, d.driver_name
FROM rides r
INNER JOIN drivers d ON r.driver_id = d.driver_id;


Failure Case (Foreign Key Violation on Insert):

If you try to insert a ride with a non-existing `driver_id` that doesn’t exist in the `drivers` table, it will fail due to the foreign key constraint:


-- Attempting to insert a ride with a non-existing driver_id
INSERT INTO rides (ride_id, driver_id, pickup_location, dropoff_location, ride_date, fare)
VALUES (304, 999, 'Coimbatore', 'Chennai', '2024-12-03 10:00:00', 800.00);


Error: This will fail because `driver_id = 999` does not exist in the `drivers` table, and the foreign key constraint ensures that only valid driver IDs can be referenced.

---

Scenario 2: Deleting Driver and Its Associated Rides

Now, let's explore the deletion behavior when we delete a driver. If you delete a driver, you might want to know how it impacts the associated rides.

Deletion of Driver (Without Cascade)

When you delete a driver (say `driver_id = 101`) from the `drivers` table, if there are associated rides in the `rides` table, the deletion will fail because of the foreign key constraint (without `ON DELETE CASCADE`).


-- Trying to delete a driver with existing rides in the rides table
DELETE FROM drivers WHERE driver_id = 101;


Error: The deletion will fail with an error like this:

ERROR:  update or delete on table "drivers" violates foreign key constraint "rides_driver_id_fkey" on table "rides"


This happens because the foreign key constraint prevents the deletion of a driver who has existing rides. The system does this to maintain referential integrity — there should be no orphaned rides without a valid driver.

What Happens with `ON DELETE CASCADE`?

If you want to automatically delete all rides associated with a driver when the driver is deleted, you can use the `ON DELETE CASCADE` option in the foreign key definition.

Create Tables with `ON DELETE CASCADE` for Rides:


-- Creating the rides table with ON DELETE CASCADE
CREATE TABLE rides (
    ride_id INT PRIMARY KEY,
    driver_id INT,
    pickup_location VARCHAR(100),
    dropoff_location VARCHAR(100),
    ride_date DATETIME,
    fare DECIMAL(10, 2),
    FOREIGN KEY (driver_id) REFERENCES drivers(driver_id) ON DELETE CASCADE
);


Now, if you delete a driver, all associated rides will be automatically deleted as well.


-- Deleting driver 101 will also delete all rides associated with driver 101
DELETE FROM drivers WHERE driver_id = 101;


This will delete the driver and all the associated rides (`ride_id = 301, 302`), ensuring that there are no orphaned records in the `rides` table.

Summary of Key Points Based on Your Questions:

1. Foreign Key with One-to-Many:
   - One driver can have many rides.
   - We use a foreign key in the `rides` table (`driver_id`) to reference the `drivers` table.

2. Failure Case on Insert:
   - If you try to insert a ride with a `driver_id` that does not exist in the `drivers` table, the insert will fail due to the foreign key constraint.

3. Deletions:
   - Without `ON DELETE CASCADE`: If a driver is deleted, the deletion will fail if they have associated rides because of the foreign key constraint.
   - With `ON DELETE CASCADE`: If a driver is deleted, all associated rides will be automatically deleted.

4. Data Redundancy:
   - Storing the `ride_id` in the `drivers` table would create data redundancy because each driver can have multiple rides. Instead, we store `driver_id` in the `rides` table to maintain a normalized structure and avoid repeating ride information in the `drivers` table.

5. Importance of Foreign Keys:
   - Foreign keys help maintain referential integrity by ensuring that relationships between tables (like `drivers` and `rides`) are valid and consistent.


------------------------------------------
 Summary of Failures:
- PRIMARY KEY: Duplicate values for the primary key will cause an error (e.g., duplicate ride_id).
- UNIQUE: Duplicate values in columns with UNIQUE constraints will fail (e.g., duplicate driver_name).
- NOT NULL: Inserting NULL into a NOT NULL column will cause an error (e.g., NULL in pickup_location).
- FOREIGN KEY: Inserting a value into a foreign key column that doesn't exist in the referenced table will fail (e.g., invalid rider_id).



=====================================================================================================

DEFAULT
=======
Sure! Let’s go through an example of using the `DEFAULT` constraint in SQL, which allows you to specify a default value for a column when no value is provided during an `INSERT`.

Example: Using `DEFAULT` with `CREATE TABLE` and `INSERT`

Let’s create a table named `customers`, where the `country` column has a default value of `'India'` in case no value is provided during insertion.

1. Create Table with Default Value:


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    country VARCHAR(50) DEFAULT 'India'
);


- The `country` column has a default value of `'India'`. If you don’t specify a value for `country` while inserting, it will automatically take the default value `'India'`.

2. Insert Data with and without Specifying `country`:

- Inserting data with `country` specified:


INSERT INTO customers (customer_id, customer_name, country)
VALUES (1, 'John Doe', 'USA');


- Inserting data without specifying `country`:


INSERT INTO customers (customer_id, customer_name)
VALUES (2, 'Jane Smith');


3. Resulting Data in `customers` Table:

- After executing both `INSERT` statements, the `customers` table will look like this:

| customer_id | customer_name | country |
|-------------|---------------|---------|
| 1           | John Doe      | USA     |
| 2           | Jane Smith    | India   |

- In the second row, since no `country` value was provided, the default value `'India'` was automatically used for the `country` column.

Summary of Key Points:

- `DEFAULT` allows you to set a default value for a column if no value is provided during an `INSERT`.
- In this case, when inserting a customer without specifying the `country`, it automatically uses `'India'`.

