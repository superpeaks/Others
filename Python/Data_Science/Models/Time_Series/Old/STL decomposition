import pandas as pd
from datetime import datetime
from statsmodels.tsa.seasonal import STL
import matplotlib.pyplot as plt
import os

# Load the data from Excel file
data = pd.read_excel('data.xlsx')

# Set the 'Dates' column as the index
data.set_index('Dates', inplace=True)

# Select the columns containing demand data (Material 1 to Material 12)
demand_data = data.iloc[:, 1:13]

# Perform time series analysis for each material
forecasts = []

for material in demand_data.columns:
    material_data = demand_data[material]

    # Step 1: Decomposition
    decomposition = STL(material_data, seasonal=5)  # Adjust the seasonal parameter as per your data characteristics
    decomposed_result = decomposition.fit()

    # Step 2: Forecasting Model (Exponential Smoothing)
    model = decomposed_result.trend  # Using the trend component for forecasting
    forecast = model[-24:]  # Forecasting for the last 24 months

    # Append the forecasted values to the forecasts list
    forecasts.append((material, forecast))

# Create a new DataFrame for the forecasts
forecast_data = pd.DataFrame()

# Populate the DataFrame with the forecasts
for material, forecast in forecasts:
    forecast_data[material] = forecast

# Get the current date and time for the filename
current_datetime = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')

# Define the output filename for forecast data
output_filename = f'forecasts_{current_datetime}.xlsx'

# Save the forecasts to the Excel file
forecast_dates = pd.date_range(start=data.index[-1] + pd.DateOffset(months=1), periods=24, freq='M')
forecast_data.insert(0, 'Date', forecast_dates)
forecast_data.to_excel(output_filename, sheet_name='Forecasts', index=False)

# Create a folder to store chart images
charts_folder = f'charts_{current_datetime}'
os.makedirs(charts_folder, exist_ok=True)

# Create separate charts for each material and save them as image files
for material in demand_data.columns:
    material_data = demand_data[material]
    forecast = forecast_data[material]

    plt.figure(figsize=(10, 6))

    # Plot the old data
    plt.plot(material_data.index, material_data, label='Historical Data')

    # Plot the forecasted data
    plt.plot(forecast_dates, forecast, label='Forecasted Data')

    plt.title(f"VS {material} - Demand Forecasts")
    plt.xlabel("Date")
    plt.ylabel("Demand")
    plt.legend()

    # Save the chart as an image file
    chart_filename = f'{charts_folder}/VS_{material}_chart.png'
    plt.savefig(chart_filename, dpi=900)
    plt.close()

print(f"Forecasts saved to {output_filename}")
print(f"Charts saved in the folder: {charts_folder}")
